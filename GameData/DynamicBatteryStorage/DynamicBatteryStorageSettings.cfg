DYNAMICBATTERYSTORAGE
{
  // Debug vessel EC data
  DebugVesselData = false
  // Debug module management
  DebugModules = false
  // Debug power handler management
  DebugHandlers = false
  // Debug main DBS storage
  DebugDynamicStorage = false
  // Debug setting setup
  DebugSettings = false
  // Debug loading of data/assets
  DebugLoading = false
  // Debug the UI
  DebugUI = false
  // Minimum warp factor to enable battery buffer
  MinimumWarpFactor = 100
  // Scaling factor for buffer, where 1.0 = absolute minimum calculated. Don't lower below 1.25.
  BufferScaling = 1.75

  // This defines the UI categories for the manager. Entries in here should have a corresponding PARTMODULEHANDLER or you'll have a bad time
  HANDLERCATEGORY
  {
    name = SolarPanels
    // The UI name of the category
    title = #LOC_DynamicBatteryStorage_UI_Category_SolarPanels
    // The modules that this category monitors (heat or electrical)
    module = KopernicusSolarPanel
    module = ModuleCurvedSolarPanel
    module = ModuleDeployableSolarPanel
    module = weatherDrivenSolarPanel
  }
  HANDLERCATEGORY
  {
    name = Generators
    title = #LOC_DynamicBatteryStorage_UI_Category_Generators
    module = ModuleGenerator
    module = ModuleCoreHeat
    module = ModuleRadioisotopeGenerator
    module = ModuleGeneratorAntenna
  }
  HANDLERCATEGORY
  {
    name = Radiators
    title = #LOC_DynamicBatteryStorage_UI_Category_Radiators
    module = ModuleActiveRadiator
    module = ModuleSystemHeatRadiator
    module = ModuleSystemHeatExchanger
  }
  HANDLERCATEGORY
  {
    name = Converters
    title = #LOC_DynamicBatteryStorage_UI_Category_Converters
    module = ModuleResourceConverter
    module = ModuleSystemHeatConverter
    module = SnackProcessor
    module = SoilRecycler
  }
  HANDLERCATEGORY
  {
    name = Harvesters
    title = #LOC_DynamicBatteryStorage_UI_Category_Harvesters
    module = ModuleResourceHarvester
    module = ModuleSystemHeatHarvester
    module = ModuleSpaceDustHarvester

  }
  HANDLERCATEGORY
  {
    name = Reactors
    title = #LOC_DynamicBatteryStorage_UI_Category_Reactors
    module = FissionGenerator
    module = FissionReactor
    module = FusionReactor
    module = ModuleFusionEngine
    module = ModuleSystemHeatFissionEngine
    module = ModuleSystemHeatFissionReactor
  }
  HANDLERCATEGORY
  {
    name = Batteries
    title = #LOC_DynamicBatteryStorage_UI_Category_Batteries
    module = RealBattery
    module = DischargeCapacitor
  }
  HANDLERCATEGORY
  {
    name = FuelTanks
    title = #LOC_DynamicBatteryStorage_UI_Category_FuelTanks
    module = ModuleCryoTank
    module = ModuleAntimatterTank

  }
  HANDLERCATEGORY
  {
    name = Lights
    title = #LOC_DynamicBatteryStorage_UI_Category_Lights
    module = ModuleLight
    module = ModuleLightEva

  }
  HANDLERCATEGORY
  {
    name = Command
    title = #LOC_DynamicBatteryStorage_UI_Category_Command
    module = ModuleCommand

  }
  HANDLERCATEGORY
  {
    name = Communication
    title = #LOC_DynamicBatteryStorage_UI_Category_Communication
    module = ModuleDataTransmitter
    module = ModuleDataTransmitterFeedeable
    module = ModuleSignalDelay
    module = ModuleRTAntenna
  }
  HANDLERCATEGORY
  {
    name = Habitation
    title = #LOC_DynamicBatteryStorage_UI_Category_Habitation
    module = ModuleDeployableCentrifuge
    module = ModuleKerbalHealth
  }
  HANDLERCATEGORY
  {
    name = Engines
    title = #LOC_DynamicBatteryStorage_UI_Category_Engines
    module = ModuleAlternator
    module = ModuleEngines
    module = ModuleEnginesFX
    module = FissionFlowRadiator
    module = ModuleChargeableEngine
  }
  HANDLERCATEGORY
  {
    name = Science
    title = #LOC_DynamicBatteryStorage_UI_Category_Science
    module = ModuleScienceConverter
    module = ModuleSpaceDustScanner
    module = ModuleSpaceDustTelescope
    module = SCANsat
  }
  // These control the handlers that are used to monitor power
  // Don't touch these unless you know what you're doing
  PARTMODULEHANDLER
  {
    // The name of the module
    name = ModuleDeployableSolarPanel
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = ModuleDeployableSolarPanelPowerHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = true
    // Is this module a producer by default?
    producer = true
    // Is this module a consumer by default?
    consumer = false
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
  }

  PARTMODULEHANDLER
  {
    name = ModuleCurvedSolarPanel
    handlerModuleName = ModuleCurvedSolarPanelPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = true
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = KopernicusSolarPanel
    handlerModuleName = KopernicusSolarPanelPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = true
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = KopernicusSolarPanels
    handlerModuleName = KopernicusSolarPanelPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = true
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = weatherDrivenSolarPanel
    handlerModuleName = WDSPPowerHandlers
    type = Power
    visible = true
    solarEfficiencyEffects = true
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleGenerator
    handlerModuleName = ModuleGeneratorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleGeneratorAntenna
    handlerModuleName = ModuleGeneratorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleRadioisotopeGenerator
    handlerModuleName = ModuleRadioisotopeGeneratorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleCoreHeat
    handlerModuleName = ModuleCoreHeatHeatHandler
    type = Heat
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleActiveRadiator
    handlerModuleName = ModuleActiveRadiatorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleActiveRadiator
    handlerModuleName = ModuleActiveRadiatorHeatHandler
    type = Heat
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleResourceConverter
    handlerModuleName = ModuleResourceConverterPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleResourceConverter
    handlerModuleName = ModuleResourceConverterHeatHandler
    type = Heat
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleCryoTank
    handlerModuleName = ModuleCryoTankPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  
  PARTMODULEHANDLER
  {
    // The name of the module
    name = SCANsat
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = SCANsatPowerHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
  }

  // Heat
  PARTMODULEHANDLER
  {
    name = ModuleResourceHarvester
    handlerModuleName = ModuleResourceHarvesterHeatHandler
    type = Heat
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleResourceHarvester
    handlerModuleName = ModuleResourceHarvesterPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = FissionGenerator
    handlerModuleName = FissionGeneratorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = FissionReactor
    handlerModuleName = FissionReactorHeatHandler
    type = Heat
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = FissionFlowRadiator
    handlerModuleName = FissionFlowRadiatorHeatHandler
    type = Heat
    visible = true
    producer = false
    consumer = true
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    name = RealBattery
    handlerModuleName = RealBatteryPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = false
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = DischargeCapacitor
    handlerModuleName = DischargeCapacitorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    name = ModuleLight
    handlerModuleName = ModuleLightPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleLightEva
    handlerModuleName = ModuleLightPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleCommand
    handlerModuleName = ModuleCommandPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleDataTransmitter
    handlerModuleName = ModuleDataTransmitterPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    name = ModuleDataTransmitterFeedeable
    handlerModuleName = ModuleDataTransmitterPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    name = ModuleDeployableCentrifuge
    handlerModuleName = ModuleDeployableCentrifugePowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = false
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleAlternator
    handlerModuleName = ModuleAlternatorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = true
    consumer = false
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    name = ModuleEngines
    handlerModuleName = ModuleEnginesPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    name = ModuleEnginesFX
    handlerModuleName = ModuleEnginesFXPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = false
    continuous = false
  }
  PARTMODULEHANDLER
  {
    // The name of the module
    name = ModuleSignalDelay
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = false
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = ecRate
      // Field to poll in flight
      flightFieldName = actualECRate
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = -1.0
      flightValueScalar = -1.0
    }
  }
  PARTMODULEHANDLER
  {
    // The name of the module
    name = ModuleKerbalHealth
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = ecPerSec
      // Field to poll in flight
      flightFieldName = ecPerSec
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = -1.0
      flightValueScalar = -1.0
    }
  }
  PARTMODULEHANDLER
  {
    // The name of the module
    name = SnackProcessor
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = ecPerSec
      // Field to poll in flight
      flightFieldName = ecPerSec
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    // The name of the module
    name = SoilRecycler
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = ecPerSec
      // Field to poll in flight
      flightFieldName = ecPerSec
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleRTAntenna
    handlerModuleName = RemoteTechPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = false
  }
  PARTMODULEHANDLER
  {
    // The name of the module
    name = ModuleScienceConverter
    // The type of handler - can be Power or Heat
    type = Power
    // The name of the handler to use
    handlerModuleName = ModuleScienceConverterPowerHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
  }

  //Space Dust
  // ----------
  PARTMODULEHANDLER
  {
    name = ModuleSpaceDustScanner
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerConsumption
      // Field to poll in flight
      flightFieldName = CurrentPowerConsumption
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleSpaceDustTelescope
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerConsumption
      // Field to poll in flight
      flightFieldName = CurrentPowerConsumption
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleSpaceDustHarvester
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerConsumption
      // Field to poll in flight
      flightFieldName = CurrentPowerConsumption
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  // Far Future Tech
  // ----------

  PARTMODULEHANDLER
  {
    name = ModuleAntimatterTank
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = ContainmentCostCurrent
      // Field to poll in flight
      flightFieldName = ContainmentCostCurrent
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleChargeableEngine
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerConsumption
      // Field to poll in flight
      flightFieldName = CurrentPowerConsumption
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = FusionReactor
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = true
    // Is this module a consumer by default?
    consumer = false
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerProduced
      // Field to poll in flight
      flightFieldName = CurrentPowerProduced
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }

  PARTMODULEHANDLER
  {
    name = ModuleFusionEngine
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = true
    // Is this module a consumer by default?
    consumer = false
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerProduced
      // Field to poll in flight
      flightFieldName = CurrentPowerProduced
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }


  // SystemHeat
  // ----------
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatFissionReactor
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = true
    // Is this module a consumer by default?
    consumer = false
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentElectricalGeneration
      // Field to poll in flight
      flightFieldName = CurrentElectricalGeneration
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatFissionEngine
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = true
    // Is this module a consumer by default?
    consumer = false
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentElectricalGeneration
      // Field to poll in flight
      flightFieldName = CurrentElectricalGeneration
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatRadiator
    handlerModuleName = ModuleActiveRadiatorPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatRadiator
    handlerModuleName = ModuleActiveRadiatorHeatHandler
    type = Heat
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatConvector
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerConsumption
      // Field to poll in flight
      flightFieldName = CurrentPowerConsumption
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatExchanger
    type = Power
    handlerModuleName = GenericFieldDataHandler
    // Is this shown in the UI at all?
    visible = true
    // Do we use solar distance attenuation?
    solarEfficiencyEffects = false
    // Is this module a producer by default?
    producer = false
    // Is this module a consumer by default?
    consumer = true
    // Does this item start off as active in the UI? Should canonically be true for constant sources/draws
    simulated = true
    // Does this item count as a continuous power source for the purpose of the UI?
    continuous = true
    HANDLER_CONFIG
    {
      // Field to poll in editor
      editorFieldName = CurrentPowerConsumption
      // Field to poll in flight
      flightFieldName = CurrentPowerConsumption
      // Multiply the output by these if you need to. Convention is that a consumer is negative.
      editorValueScalar = 1.0
      flightValueScalar = 1.0
    }
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatHarvester
    handlerModuleName = ModuleResourceHarvesterHeatHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
  PARTMODULEHANDLER
  {
    name = ModuleSystemHeatConverter
    handlerModuleName = ModuleResourceConverterPowerHandler
    type = Power
    visible = true
    solarEfficiencyEffects = false
    producer = false
    consumer = true
    simulated = true
    continuous = true
  }
}
